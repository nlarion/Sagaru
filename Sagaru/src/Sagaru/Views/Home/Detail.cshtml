@{
    ViewData["Title"] = "Item - Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@model Sagaru.Models.Project
<h2>Project Details</h2>
<hr />

<canvas id="myCanvas" width="500" height="500"></canvas>
<p>@Html.DisplayNameFor(model => model.Name): @Html.DisplayFor(model => model.Name)</p>
<p>@Html.DisplayNameFor(model => model.Description): @Html.DisplayFor(model => model.Description)</p>
<ul>
    @foreach (var listProject in Model.Shapes)
    {
         <li>@Html.DisplayFor(modelItem => listProject.Type)</li>
    }
</ul>
<p>@Html.ActionLink("Edit", "Update", "Home", new { id = Model.ProjectId }) | @Html.ActionLink("Back to Home", "Index", "Account")</p>
<script>
    const STATE_INIT = 10,
		STATE_PLAYING = 20;
    var Game = function() {
        this.canvas = document.getElementById('myCanvas');
        this.c = this.canvas.getContext('2d');
        this.gameObjects = [];
        this.appState = STATE_INIT;
        this.mouseX = 0;
        this.mouseY = 0;
        this.isTheMouseBeingPressed = false;
        this.isTheMouseUnClicked = false;
        @foreach ( var listProject in Model.Shapes)
        {
        <text>
        var shape = new Shape("@listProject.Type", @listProject.X, @listProject.Y);
        this.gameObjects.push(shape)
        </text>
        }

    };
    Game.prototype.mouseClicked  = function(event) {
        this.isTheMouseBeingPressed = true;
    }
    Game.prototype.mouseUnClicked  = function(event) {
        this.isTheMouseUnClicked = true;
    }
    Game.prototype.mouseMove = function(event) {
        if (event.offsetX || event.offsetX == 0) { // Opera
            this.mouseX = event.offsetX;
            this.mouseY = event.offsetY;
        } else if ( event.layerX ||  event.layerX == 0) { // Firefox
            console.log(event);
            this.mouseX = event.layerX;
            this.mouseY = event.layerY;
        }  
    }
    Game.prototype.gameManager = function() {
        switch(this.appState){
            case STATE_INIT:
                this.canvas.addEventListener("mousedown", this.mouseClicked.bind(this), false);
                this.canvas.addEventListener("mouseup", this.mouseUnClicked.bind(this), false);
                this.canvas.addEventListener("mousemove", this.mouseMove.bind(this), false);
                this.appState = STATE_PLAYING;
                break;
            case STATE_PLAYING:
                this.c.fillStyle = "rgba(0,0,0,1)";
                this.c.fillRect(0,0,this.canvas.width,this.canvas.height);
                for(var i = 0; i < this.gameObjects.length;i++){
                    this.drawShape(this.gameObjects[i].type, this.gameObjects[i].x, this.gameObjects[i].y)
                }
                this.checkForNewShape();
                this.drawCursor();
                this.c.font = "30px monospace";
                this.c.fillStyle = "green";
                this.c.fillText("X: " + this.mouseX + " Y: " + this.mouseY, 10, 25)
                break;        
        }
    };
    Game.prototype.checkForNewShape = function() {
        if (this.isTheMouseUnClicked === true) {
            var shape = new Shape("Circle", this.mouseX, this.mouseY);
            this.gameObjects.push(shape)
            this.isTheMouseUnClicked = false;
        }
    
    }
    Game.prototype.drawCursor = function() {
        this.c.fillStyle = "#D9D9D9";
        this.c.arc(this.mouseX, this.mouseY, 10, 0, Math.PI*2, true);
        this.c.closePath();
        this.c.fill();
    }
    Game.prototype.drawShape = function(shape, x, y) {
        switch(shape) {
            case "Triangle":
                this.c.fillStyle = "#D9D9D9";
                this.c.beginPath();
                this.c.moveTo(x, y);
                this.c.lineTo(x+10, y+10);
                this.c.lineTo(x-10, y+10);
                this.c.closePath();
                this.c.fill();
                break;
            case "Circle":
                this.c.fillStyle = "#D9D9D9";
                this.c.beginPath();
                this.c.arc(x, y, 10, 0, Math.PI*2, true);
                this.c.closePath();
                this.c.fill();
                break;
            case "Rectangle":
                this.c.fillStyle = "#D9D9D9";
                this.c.fillRect(x, y, 10, 10);
                break;
            default:
                //Draw Circle
                this.c.fillStyle = "#D9D9D9";
                this.c.arc(x, y, 10, 0, Math.PI*2, true);
                this.c.closePath();
                this.c.fill();
                break;
        }
    }
    Game.prototype.runTheGame = function() {
        var t = this;
        setInterval(function(){t.gameManager();}, 30);
    };
    var Shape = function(type, x, y) {
        this.type = type;
        this.x = x;
        this.y = y;
    };
    function eventWindowLoaded() {
        var game = new Game();
        game.runTheGame();
    }
    (function () {
        window.addEventListener('load', eventWindowLoaded, false);	
    }());
</script>